"use strict";
/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the terms of the LICENSE file distributed with this project.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var moment = tslib_1.__importStar(require("moment-timezone"));
var timezoneMetadata_1 = require("./timezoneMetadata");
exports.TimezoneDisplayFormat = {
    /** Abbreviation format: `"HST"` */
    ABBREVIATION: "abbreviation",
    /** Composite format: `"Pacific/Honolulu (HST) -10:00"` */
    COMPOSITE: "composite",
    /** Name format: `"Pacific/Honolulu"` */
    NAME: "name",
    /** Offset format: `"-10:00"` */
    OFFSET: "offset",
};
function formatTimezone(timezone, date, displayFormat) {
    if (!timezone || !moment.tz.zone(timezone)) {
        return undefined;
    }
    var _a = timezoneMetadata_1.getTimezoneMetadata(timezone, date), abbreviation = _a.abbreviation, offsetAsString = _a.offsetAsString;
    switch (displayFormat) {
        case exports.TimezoneDisplayFormat.ABBREVIATION:
            // Fall back to the offset when there is no abbreviation.
            return abbreviation !== undefined ? abbreviation : offsetAsString;
        case exports.TimezoneDisplayFormat.NAME:
            return timezone;
        case exports.TimezoneDisplayFormat.OFFSET:
            return offsetAsString;
        case exports.TimezoneDisplayFormat.COMPOSITE:
            return "" + timezone + (abbreviation ? " (" + abbreviation + ")" : "") + " " + offsetAsString;
    }
}
exports.formatTimezone = formatTimezone;
//# sourceMappingURL=timezoneDisplayFormat.js.map