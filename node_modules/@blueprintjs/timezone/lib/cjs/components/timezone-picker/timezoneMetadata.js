"use strict";
/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the terms of the LICENSE file distributed with this project.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var moment = tslib_1.__importStar(require("moment-timezone"));
// non-empty abbreviations that do not begin with -/+
var ABBR_REGEX = /^[^-+]/;
function getTimezoneMetadata(timezone, date) {
    var timestamp = date.getTime();
    var zone = moment.tz.zone(timezone);
    var zonedDate = moment.tz(timestamp, timezone);
    var offset = zonedDate.utcOffset();
    var offsetAsString = zonedDate.format("Z");
    // Only include abbreviations that are not just a repeat of the offset:
    // moment-timezone's `abbr` falls back to the time offset if a zone doesn't have an abbr.
    var abbr = zone.abbr(timestamp);
    var abbreviation = ABBR_REGEX.test(abbr) ? abbr : undefined;
    return {
        abbreviation: abbreviation,
        offset: offset,
        offsetAsString: offsetAsString,
        population: zone.population,
        timezone: timezone,
    };
}
exports.getTimezoneMetadata = getTimezoneMetadata;
//# sourceMappingURL=timezoneMetadata.js.map