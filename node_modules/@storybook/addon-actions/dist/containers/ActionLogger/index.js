"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _lib = require("../../lib");

var _util = require("../../lib/util");

var _ActionLogger = _interopRequireDefault(require("../../components/ActionLogger"));

var _ = require("../..");

/* eslint-disable no-underscore-dangle */
var ActionLogger =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ActionLogger, _React$Component);

  function ActionLogger(props) {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ActionLogger);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ActionLogger)).call.apply(_getPrototypeOf2, [this, props].concat(args)));
    _this.state = {
      actions: []
    };

    _this._actionListener = function (action) {
      return _this.addAction(action);
    };

    _this._storyChangeListener = function () {
      return _this.handleStoryChange();
    };

    return _this;
  }

  (0, _createClass2.default)(ActionLogger, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          channel = _this$props.channel,
          api = _this$props.api;
      channel.on(_.EVENT_ID, this._actionListener);
      this.stopListeningOnStory = api.onStory(this._storyChangeListener);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var channel = this.props.channel;
      channel.removeListener(_.EVENT_ID, this._actionListener);

      if (this.stopListeningOnStory) {
        this.stopListeningOnStory();
      }
    }
  }, {
    key: "handleStoryChange",
    value: function handleStoryChange() {
      var actions = this.state.actions;

      if (actions.length > 0 && actions[0].options.clearOnStoryChange) {
        this.clearActions();
      }
    }
  }, {
    key: "addAction",
    value: function addAction(action) {
      var _this$state$actions = this.state.actions,
          actions = _this$state$actions === void 0 ? [] : _this$state$actions;
      actions = (0, _toConsumableArray2.default)(actions);
      action.data.args = action.data.args.map(function (arg) {
        return (0, _lib.retrocycle)(arg);
      }); // eslint-disable-line

      var isCyclic = !!action.data.args.find(function (arg) {
        return (0, _util.isObject)(arg) && arg[_lib.CYCLIC_KEY];
      });
      var previous = actions.length && actions[0];

      if (previous && !isCyclic && (0, _deepEqual.default)(previous.data, action.data, {
        strict: true
      })) {
        previous.count++; // eslint-disable-line
      } else {
        action.count = 1; // eslint-disable-line

        actions.unshift(action);
      }

      this.setState({
        actions: actions.slice(0, action.options.limit)
      });
    }
  }, {
    key: "clearActions",
    value: function clearActions() {
      this.setState({
        actions: []
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state$actions2 = this.state.actions,
          actions = _this$state$actions2 === void 0 ? [] : _this$state$actions2;
      var active = this.props.active;
      var props = {
        actions: actions,
        onClear: function onClear() {
          return _this2.clearActions();
        }
      };
      return active ? _react.default.createElement(_ActionLogger.default, props) : null;
    }
  }]);
  return ActionLogger;
}(_react.default.Component);

exports.default = ActionLogger;
ActionLogger.propTypes = {
  active: _propTypes.default.bool.isRequired,
  channel: _propTypes.default.shape({
    emit: _propTypes.default.func,
    on: _propTypes.default.func,
    removeListener: _propTypes.default.func
  }).isRequired,
  api: _propTypes.default.shape({
    onStory: _propTypes.default.func,
    getQueryParam: _propTypes.default.func,
    setQueryParams: _propTypes.default.func
  }).isRequired
};