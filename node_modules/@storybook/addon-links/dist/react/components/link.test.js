"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _index = require("../../index");

var _preview = require("../../preview.test");

var _link = _interopRequireDefault(require("./link"));

jest.mock('@storybook/addons');
describe('LinkTo', function () {
  describe('render', function () {
    it('should render a link',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      var channel, wrapper;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              channel = (0, _preview.mockChannel)();

              _addons.default.getChannel.mockReturnValue(channel);

              wrapper = (0, _enzyme.shallow)(_react.default.createElement(_link.default, {
                kind: "foo",
                story: "bar"
              }));
              _context.next = 5;
              return wrapper.instance().updateHref(wrapper.props());

            case 5:
              wrapper.update();
              expect(wrapper).toMatchSnapshot();

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
  });
  describe('events', function () {
    it('should select the kind and story on click', function () {
      var channel = {
        emit: jest.fn(),
        on: jest.fn()
      };

      _addons.default.getChannel.mockReturnValue(channel);

      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_link.default, {
        kind: "foo",
        story: "bar"
      }));
      wrapper.simulate('click');
      expect(channel.emit).toHaveBeenCalledWith(_index.EVENT_ID, {
        kind: 'foo',
        story: 'bar'
      });
    });
  });
});