"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withLinks = exports.hrefTo = exports.linkTo = exports.openLink = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _global = require("global");

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _coreEvents = _interopRequireDefault(require("@storybook/core-events"));

var _events = require("./events");

var openLink = function openLink(params) {
  return _addons.default.getChannel().emit(_events.EVENT_ID, params);
};

exports.openLink = openLink;

var valueOrCall = function valueOrCall(args) {
  return function (value) {
    return typeof value === 'function' ? value.apply(void 0, (0, _toConsumableArray2.default)(args)) : value;
  };
};

var linkTo = function linkTo(kind, story) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var resolver = valueOrCall(args);
    openLink({
      kind: resolver(kind),
      story: resolver(story)
    });
  };
};

exports.linkTo = linkTo;

var hrefTo = function hrefTo(kind, story) {
  return new Promise(function (resolve) {
    var channel = _addons.default.getChannel();

    channel.on(_events.RECEIVE_HREF_EVENT_ID, resolve);
    channel.emit(_events.REQUEST_HREF_EVENT_ID, {
      kind: kind,
      story: story
    });
  });
};

exports.hrefTo = hrefTo;

var linksListener = function linksListener(e) {
  var _e$target$dataset = e.target.dataset,
      sbKind = _e$target$dataset.sbKind,
      sbStory = _e$target$dataset.sbStory;

  if (sbKind || sbStory) {
    e.preventDefault();
    linkTo(sbKind, sbStory)();
  }
};

var linkSubscribtion = function linkSubscribtion() {
  _global.document.addEventListener('click', linksListener);

  return function () {
    return _global.document.removeEventListener('click', linksListener);
  };
};

var withLinks = function withLinks(story) {
  _addons.default.getChannel().emit(_coreEvents.default.REGISTER_SUBSCRIPTION, linkSubscribtion);

  return story();
};

exports.withLinks = withLinks;