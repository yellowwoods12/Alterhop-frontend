"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockChannel = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _preview = require("./preview");

var _ = require(".");

jest.mock('@storybook/addons');

var mockChannel = function mockChannel() {
  var cb;
  return {
    emit: function emit(id, payload) {
      if (id === _.REQUEST_HREF_EVENT_ID) {
        cb("?selectedKind=".concat(payload.kind, "&selectedStory=").concat(payload.story));
      }
    },
    on: function on(id, callback) {
      if (id === _.RECEIVE_HREF_EVENT_ID) {
        cb = callback;
      }
    }
  };
};

exports.mockChannel = mockChannel;
describe('preview', function () {
  describe('linkTo()', function () {
    it('should select the kind and story provided', function () {
      var channel = {
        emit: jest.fn()
      };

      _addons.default.getChannel.mockReturnValue(channel);

      var handler = (0, _preview.linkTo)('kind', 'story');
      handler();
      expect(channel.emit).toHaveBeenCalledWith(_.EVENT_ID, {
        kind: 'kind',
        story: 'story'
      });
    });
    it('should handle functions returning strings', function () {
      var channel = {
        emit: jest.fn()
      };

      _addons.default.getChannel.mockReturnValue(channel);

      var handler = (0, _preview.linkTo)(function (a, b) {
        return a + b;
      }, function (a, b) {
        return b + a;
      });
      handler('foo', 'bar');
      expect(channel.emit).toHaveBeenCalledWith(_.EVENT_ID, {
        kind: 'foobar',
        story: 'barfoo'
      });
    });
  });
  describe('hrefTo()', function () {
    it('should return promise resolved with story href',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      var channel, href;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              channel = mockChannel();

              _addons.default.getChannel.mockReturnValue(channel);

              _context.next = 4;
              return (0, _preview.hrefTo)('kind', 'story');

            case 4:
              href = _context.sent;
              expect(href).toBe('?selectedKind=kind&selectedStory=story');

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
  });
});