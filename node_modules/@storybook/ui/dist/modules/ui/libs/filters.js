"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storyFilter = storyFilter;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _sortBy = _interopRequireDefault(require("lodash/sortBy"));

var searchOptions = {
  shouldSort: false,
  tokenize: true,
  matchAllTokens: false,
  includeMatches: true,
  findAllMatches: true,
  includeScore: false,
  threshold: 0.2,
  location: 0,
  distance: 200,
  maxPatternLength: 32,
  minMatchCharLength: 2,
  keys: ['namespaces', 'storyName', 'searchHook']
};

function sort(stories, sortStoriesByKind) {
  if (!sortStoriesByKind) return stories;
  var sortedStories = (0, _sortBy.default)(stories, ['kind']);
  return sortedStories.map(function (item) {
    return (0, _objectSpread2.default)({}, item, {
      stories: item.stories.concat().sort()
    });
  });
}

function flattenStories(items) {
  return items.reduce(function (arr, item) {
    var flatten = item.stories.map(function (story) {
      return {
        kind: item.kind,
        rootName: item.rootName,
        namespaces: item.namespaces,
        storyName: story
      };
    });
    return arr.concat(flatten);
  }, []);
}

function applySearchHookForSelectedKind(stories, filter, selectedKind, selectedStory) {
  return stories.map(function (story) {
    if (story.kind === selectedKind && story.storyName === selectedStory) {
      return (0, _objectSpread2.default)({}, story, {
        searchHook: filter
      });
    }

    return story;
  });
}

function getGroupedStoryItem(map, item, matches) {
  var storyItem = map.get(item.kind);

  if (!storyItem) {
    storyItem = {
      kind: item.kind,
      rootName: item.rootName,
      namespaces: item.namespaces,
      stories: [],
      matches: matches.filter(function (match) {
        return match.key === 'namespaces';
      })
    };
    map.set(item.kind, storyItem);
  }

  return storyItem;
}

function appendStoryMatch(item, matches) {
  var storyMatch = matches.find(function (match) {
    return match.key === 'storyName';
  });

  if (storyMatch) {
    item.matches.push({
      indices: storyMatch.indices,
      value: storyMatch.value,
      key: 'stories'
    });
  }
}

function groupStories(matchedItems) {
  var storiesMap = matchedItems.reduce(function (map, matchedItem) {
    var item = matchedItem.item,
        matches = matchedItem.matches;
    var groupedStoryItem = getGroupedStoryItem(map, item, matches);
    groupedStoryItem.stories.push(item.storyName);
    appendStoryMatch(groupedStoryItem, matches);
    return map;
  }, new Map());
  return Array.from(storiesMap.values());
}

function storyFilter(stories, filter, selectedKind, selectedStory, sortStoriesByKind) {
  if (!stories) {
    return null;
  }

  var sorted = sort(stories, sortStoriesByKind);

  if (!filter) {
    return sorted;
  }

  var flattened = flattenStories(sorted);
  var storiesWithHook = applySearchHookForSelectedKind(flattened, filter, selectedKind, selectedStory);
  var fuse = new _fuse.default(storiesWithHook, searchOptions);
  var foundStories = fuse.search(filter);
  return groupStories(foundStories);
}