"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread5 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _reactTreebeard = require("react-treebeard");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _styled = _interopRequireDefault(require("@emotion/styled"));

var _tree_header = _interopRequireDefault(require("./tree_header"));

var _tree_node_type = _interopRequireDefault(require("./tree_node_type"));

var _tree_decorators = _interopRequireDefault(require("./tree_decorators"));

var _tree_style = _interopRequireDefault(require("./tree_style"));

var namespaceSeparator = '@';

function createNodeKey(_ref) {
  var namespaces = _ref.namespaces,
      type = _ref.type;
  return (0, _toConsumableArray2.default)(namespaces).concat([[type]]).join(namespaceSeparator);
}

function getSelectedNodes(selectedHierarchy) {
  return selectedHierarchy.reduce(function (nodes, namespace) {
    var node = {};
    node.type = _tree_node_type.default.NAMESPACE;

    if (!nodes.length) {
      node.namespaces = [namespace];
    } else {
      var lastNode = nodes[nodes.length - 1];
      node.namespaces = (0, _toConsumableArray2.default)(lastNode.namespaces).concat([[namespace]]);
    }

    nodes.push(node);
    return nodes;
  }, []).reduce(function (nodesMap, node) {
    return (0, _objectSpread5.default)({}, nodesMap, (0, _defineProperty2.default)({}, createNodeKey(node), true));
  }, {});
}

var Wrapper =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "emockhz0"
})({
  paddingTop: 20
});

var Stories =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Stories, _React$Component);

  function Stories() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Stories);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Stories)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.onToggle = _this.onToggle.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    var selectedHierarchy = _this.props.selectedHierarchy;
    _this.state = {
      overriddenFilteredNodes: {},
      nodes: getSelectedNodes(selectedHierarchy)
    };
    return _this;
  }

  (0, _createClass2.default)(Stories, [{
    key: "onToggle",
    value: function onToggle(node, toggled) {
      if (node.story) {
        this.fireOnKindAndStory(node.kind, node.story);
      }

      if (!node.namespaces) {
        return;
      }

      this.setState(function (prevState) {
        return {
          nodes: (0, _objectSpread5.default)({}, prevState.nodes, (0, _defineProperty2.default)({}, node.key, toggled)),
          overriddenFilteredNodes: (0, _objectSpread5.default)({}, prevState.overriddenFilteredNodes, (0, _defineProperty2.default)({}, node.key, !toggled))
        };
      });
    }
  }, {
    key: "fireOnKindAndStory",
    value: function fireOnKindAndStory(kind, story) {
      var onSelectStory = this.props.onSelectStory;
      if (onSelectStory) onSelectStory(kind, story);
    }
  }, {
    key: "mapStoriesHierarchy",
    value: function mapStoriesHierarchy(storiesHierarchy) {
      var _this2 = this;

      var treeModel = {
        namespaces: storiesHierarchy.namespaces,
        name: storiesHierarchy.name,
        highlight: storiesHierarchy.highlight,
        children: []
      };

      if (storiesHierarchy.stories && storiesHierarchy.stories.length) {
        var _this$props = this.props,
            selectedStory = _this$props.selectedStory,
            selectedKind = _this$props.selectedKind;
        storiesHierarchy.stories.map(function (story) {
          return {
            name: story.name,
            story: story.name,
            kind: storiesHierarchy.kind,
            active: selectedStory === story.name && selectedKind === storiesHierarchy.kind,
            type: _tree_node_type.default.STORY,
            highlight: story.highlight
          };
        }).forEach(function (story) {
          return treeModel.children.push(story);
        });
      }

      if (storiesHierarchy.isNamespace) {
        treeModel.type = _tree_node_type.default.NAMESPACE;

        if (storiesHierarchy.map.size > 0) {
          storiesHierarchy.map.forEach(function (childItem) {
            return treeModel.children.push(_this2.mapStoriesHierarchy(childItem));
          });
        }
      }

      treeModel.key = createNodeKey(treeModel);
      treeModel.toggled = this.isToggled(treeModel);
      return treeModel;
    }
  }, {
    key: "isToggled",
    value: function isToggled(treeModel) {
      var nodes = this.state.nodes;
      return nodes[treeModel.key] || this.isFilteredNode(treeModel.key);
    }
  }, {
    key: "isFilteredNode",
    value: function isFilteredNode(key) {
      var overriddenFilteredNodes = this.state.overriddenFilteredNodes;
      var storyFilter = this.props.storyFilter;
      return !storyFilter ? false : !overriddenFilteredNodes[key];
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          storiesHierarchy = _this$props2.storiesHierarchy,
          sidebarAnimations = _this$props2.sidebarAnimations;
      var data = this.mapStoriesHierarchy(storiesHierarchy);
      data.toggled = true;
      data.root = true;
      return _react.default.createElement(Wrapper, null, storiesHierarchy.name && _react.default.createElement(_tree_header.default, null, storiesHierarchy.name), _react.default.createElement(_reactTreebeard.Treebeard, {
        style: _tree_style.default,
        data: data,
        onToggle: this.onToggle,
        animations: sidebarAnimations ? undefined : false,
        decorators: _tree_decorators.default
      }));
    }
  }]);
  return Stories;
}(_react.default.Component);

Stories.getDerivedStateFromProps = function (nextProps, prevState) {
  var _nextProps$selectedHi = nextProps.selectedHierarchy,
      selectedHierarchy = _nextProps$selectedHi === void 0 ? [] : _nextProps$selectedHi,
      storyFilter = nextProps.storyFilter;
  var _prevState$prevSelect = prevState.prevSelectedHierarchy,
      prevSelectedHierarchy = _prevState$prevSelect === void 0 ? [] : _prevState$prevSelect,
      prevStoryFilter = prevState.prevStoryFilter;
  var shouldClearFilteredNodes = storyFilter !== prevStoryFilter;
  var selectedHierarchyChanged = !(0, _deepEqual.default)(selectedHierarchy, prevSelectedHierarchy);

  if (selectedHierarchyChanged || shouldClearFilteredNodes) {
    var selectedNodes = getSelectedNodes(selectedHierarchy);
    return {
      overriddenFilteredNodes: shouldClearFilteredNodes ? {} : prevState.overriddenFilteredNodes,
      nodes: (0, _objectSpread5.default)({}, prevState.nodes, selectedNodes),
      prevSelectedHierarchy: selectedHierarchy,
      prevStoryFilter: storyFilter
    };
  }

  return null;
};

Stories.defaultProps = {
  onSelectStory: null,
  storiesHierarchy: null,
  storyFilter: null,
  sidebarAnimations: true
};
Stories.propTypes = {
  storyFilter: _propTypes.default.string,
  storiesHierarchy: _propTypes.default.shape({
    namespaces: _propTypes.default.arrayOf(_propTypes.default.string),
    name: _propTypes.default.string,
    map: _propTypes.default.object
  }),
  selectedHierarchy: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  selectedKind: _propTypes.default.string.isRequired,
  selectedStory: _propTypes.default.string.isRequired,
  onSelectStory: _propTypes.default.func,
  sidebarAnimations: _propTypes.default.bool
};
(0, _reactLifecyclesCompat.polyfill)(Stories);
var _default = Stories;
exports.default = _default;