"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _shortcuts = _interopRequireDefault(require("./shortcuts"));

var MockClientStore =
/*#__PURE__*/
function () {
  function MockClientStore() {
    (0, _classCallCheck2.default)(this, MockClientStore);
  }

  (0, _createClass2.default)(MockClientStore, [{
    key: "update",
    value: function update(cb) {
      this.updateCallback = cb;
    }
  }]);
  return MockClientStore;
}();

describe('manager.shortcuts.actions.shortcuts', function () {
  describe('setOptions', function () {
    test('should update options', function () {
      var clientStore = new MockClientStore();

      _shortcuts.default.setOptions({
        clientStore: clientStore
      }, {
        goFullScreen: true
      });

      var stateUpdates = clientStore.updateCallback({});
      expect(stateUpdates.shortcutOptions).toMatchObject({
        goFullScreen: true
      });
    });
    test('should only update options for the key already defined', function () {
      var clientStore = new MockClientStore();

      _shortcuts.default.setOptions({
        clientStore: clientStore
      }, {
        goFullScreen: true,
        random: 'value'
      });

      var stateUpdates = clientStore.updateCallback({});
      expect(stateUpdates.shortcutOptions).toMatchObject({
        goFullScreen: true
      });
      expect(stateUpdates.shortcutOptions).not.toMatchObject({
        random: 'value'
      });
    });
    test('should warn about deprecated option names', function () {
      var clientStore = new MockClientStore();
      var spy = jest.spyOn(console, 'warn').mockImplementation(function () {});

      _shortcuts.default.setOptions({
        clientStore: clientStore
      }, {
        showLeftPanel: 1,
        showDownPanel: 2,
        downPanelInRight: 3
      });

      var stateUpdates = clientStore.updateCallback({});
      expect(spy).toHaveBeenCalledTimes(3);
      expect(stateUpdates.shortcutOptions).toMatchObject({
        showStoriesPanel: 1,
        showAddonPanel: 2,
        addonPanelInRight: 3
      });
      spy.mockReset();
      spy.mockRestore();
    });
  });
});